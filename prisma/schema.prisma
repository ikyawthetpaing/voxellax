generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
  likes         Like[]
  reviews       Review[]
  role          String    @default("user")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id          String    @id @default(cuid())
  name        String
  description String
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")
  products    Product[]
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  category    String
  subcategory String?
  licenses    License[]
  images    Image[]
  reviews   Review[]
  likes     Like[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?
}

model License {
  id        String   @id @default(cuid())
  type      String
  price     Float
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Image {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Review {
  id        String   @id @default(cuid())
  message   String
  rate      Int
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
